// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto;
namespace tree {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace tree
PROTOBUF_NAMESPACE_OPEN
template<> ::tree::Node* Arena::CreateMaybeMessage<::tree::Node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tree {

// ===================================================================

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tree.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tree.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 4,
    kAbsPathFieldNumber = 5,
    kRelativePathFieldNumber = 6,
    kNameFieldNumber = 7,
    kMd5FieldNumber = 10,
    kIsRootFieldNumber = 1,
    kFileTypeFieldNumber = 2,
    kLastModifiedTmstmpFieldNumber = 8,
    kMaxLastModifiedTmstmpFieldNumber = 9,
    kIdFieldNumber = 3,
  };
  // repeated .tree.Node children = 4;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::tree::Node* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tree::Node >*
      mutable_children();
  private:
  const ::tree::Node& _internal_children(int index) const;
  ::tree::Node* _internal_add_children();
  public:
  const ::tree::Node& children(int index) const;
  ::tree::Node* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tree::Node >&
      children() const;

  // string abs_path = 5;
  void clear_abs_path();
  const std::string& abs_path() const;
  void set_abs_path(const std::string& value);
  void set_abs_path(std::string&& value);
  void set_abs_path(const char* value);
  void set_abs_path(const char* value, size_t size);
  std::string* mutable_abs_path();
  std::string* release_abs_path();
  void set_allocated_abs_path(std::string* abs_path);
  private:
  const std::string& _internal_abs_path() const;
  void _internal_set_abs_path(const std::string& value);
  std::string* _internal_mutable_abs_path();
  public:

  // string relative_path = 6;
  void clear_relative_path();
  const std::string& relative_path() const;
  void set_relative_path(const std::string& value);
  void set_relative_path(std::string&& value);
  void set_relative_path(const char* value);
  void set_relative_path(const char* value, size_t size);
  std::string* mutable_relative_path();
  std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);
  private:
  const std::string& _internal_relative_path() const;
  void _internal_set_relative_path(const std::string& value);
  std::string* _internal_mutable_relative_path();
  public:

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string md5 = 10;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bool is_root = 1;
  void clear_is_root();
  bool is_root() const;
  void set_is_root(bool value);
  private:
  bool _internal_is_root() const;
  void _internal_set_is_root(bool value);
  public:

  // uint32 file_type = 2;
  void clear_file_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type() const;
  void set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_type() const;
  void _internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 last_modified_tmstmp = 8;
  void clear_last_modified_tmstmp();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_modified_tmstmp() const;
  void set_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_modified_tmstmp() const;
  void _internal_set_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_last_modified_tmstmp = 9;
  void clear_max_last_modified_tmstmp();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_last_modified_tmstmp() const;
  void set_max_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_last_modified_tmstmp() const;
  void _internal_set_max_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tree.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tree::Node > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abs_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  bool is_root_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_modified_tmstmp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_last_modified_tmstmp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// bool is_root = 1;
inline void Node::clear_is_root() {
  is_root_ = false;
}
inline bool Node::_internal_is_root() const {
  return is_root_;
}
inline bool Node::is_root() const {
  // @@protoc_insertion_point(field_get:tree.Node.is_root)
  return _internal_is_root();
}
inline void Node::_internal_set_is_root(bool value) {
  
  is_root_ = value;
}
inline void Node::set_is_root(bool value) {
  _internal_set_is_root(value);
  // @@protoc_insertion_point(field_set:tree.Node.is_root)
}

// uint32 file_type = 2;
inline void Node::clear_file_type() {
  file_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::_internal_file_type() const {
  return file_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::file_type() const {
  // @@protoc_insertion_point(field_get:tree.Node.file_type)
  return _internal_file_type();
}
inline void Node::_internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_type_ = value;
}
inline void Node::set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:tree.Node.file_type)
}

// uint32 id = 3;
inline void Node::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::id() const {
  // @@protoc_insertion_point(field_get:tree.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Node::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tree.Node.id)
}

// repeated .tree.Node children = 4;
inline int Node::_internal_children_size() const {
  return children_.size();
}
inline int Node::children_size() const {
  return _internal_children_size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline ::tree::Node* Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:tree.Node.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tree::Node >*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:tree.Node.children)
  return &children_;
}
inline const ::tree::Node& Node::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::tree::Node& Node::children(int index) const {
  // @@protoc_insertion_point(field_get:tree.Node.children)
  return _internal_children(index);
}
inline ::tree::Node* Node::_internal_add_children() {
  return children_.Add();
}
inline ::tree::Node* Node::add_children() {
  // @@protoc_insertion_point(field_add:tree.Node.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tree::Node >&
Node::children() const {
  // @@protoc_insertion_point(field_list:tree.Node.children)
  return children_;
}

// string abs_path = 5;
inline void Node::clear_abs_path() {
  abs_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::abs_path() const {
  // @@protoc_insertion_point(field_get:tree.Node.abs_path)
  return _internal_abs_path();
}
inline void Node::set_abs_path(const std::string& value) {
  _internal_set_abs_path(value);
  // @@protoc_insertion_point(field_set:tree.Node.abs_path)
}
inline std::string* Node::mutable_abs_path() {
  // @@protoc_insertion_point(field_mutable:tree.Node.abs_path)
  return _internal_mutable_abs_path();
}
inline const std::string& Node::_internal_abs_path() const {
  return abs_path_.GetNoArena();
}
inline void Node::_internal_set_abs_path(const std::string& value) {
  
  abs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_abs_path(std::string&& value) {
  
  abs_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tree.Node.abs_path)
}
inline void Node::set_abs_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  abs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tree.Node.abs_path)
}
inline void Node::set_abs_path(const char* value, size_t size) {
  
  abs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tree.Node.abs_path)
}
inline std::string* Node::_internal_mutable_abs_path() {
  
  return abs_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_abs_path() {
  // @@protoc_insertion_point(field_release:tree.Node.abs_path)
  
  return abs_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_abs_path(std::string* abs_path) {
  if (abs_path != nullptr) {
    
  } else {
    
  }
  abs_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abs_path);
  // @@protoc_insertion_point(field_set_allocated:tree.Node.abs_path)
}

// string relative_path = 6;
inline void Node::clear_relative_path() {
  relative_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::relative_path() const {
  // @@protoc_insertion_point(field_get:tree.Node.relative_path)
  return _internal_relative_path();
}
inline void Node::set_relative_path(const std::string& value) {
  _internal_set_relative_path(value);
  // @@protoc_insertion_point(field_set:tree.Node.relative_path)
}
inline std::string* Node::mutable_relative_path() {
  // @@protoc_insertion_point(field_mutable:tree.Node.relative_path)
  return _internal_mutable_relative_path();
}
inline const std::string& Node::_internal_relative_path() const {
  return relative_path_.GetNoArena();
}
inline void Node::_internal_set_relative_path(const std::string& value) {
  
  relative_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_relative_path(std::string&& value) {
  
  relative_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tree.Node.relative_path)
}
inline void Node::set_relative_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  relative_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tree.Node.relative_path)
}
inline void Node::set_relative_path(const char* value, size_t size) {
  
  relative_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tree.Node.relative_path)
}
inline std::string* Node::_internal_mutable_relative_path() {
  
  return relative_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_relative_path() {
  // @@protoc_insertion_point(field_release:tree.Node.relative_path)
  
  return relative_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    
  } else {
    
  }
  relative_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relative_path);
  // @@protoc_insertion_point(field_set_allocated:tree.Node.relative_path)
}

// string name = 7;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:tree.Node.name)
  return _internal_name();
}
inline void Node::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tree.Node.name)
}
inline std::string* Node::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tree.Node.name)
  return _internal_mutable_name();
}
inline const std::string& Node::_internal_name() const {
  return name_.GetNoArena();
}
inline void Node::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tree.Node.name)
}
inline void Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tree.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tree.Node.name)
}
inline std::string* Node::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:tree.Node.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tree.Node.name)
}

// uint64 last_modified_tmstmp = 8;
inline void Node::clear_last_modified_tmstmp() {
  last_modified_tmstmp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::_internal_last_modified_tmstmp() const {
  return last_modified_tmstmp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::last_modified_tmstmp() const {
  // @@protoc_insertion_point(field_get:tree.Node.last_modified_tmstmp)
  return _internal_last_modified_tmstmp();
}
inline void Node::_internal_set_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_modified_tmstmp_ = value;
}
inline void Node::set_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_modified_tmstmp(value);
  // @@protoc_insertion_point(field_set:tree.Node.last_modified_tmstmp)
}

// uint64 max_last_modified_tmstmp = 9;
inline void Node::clear_max_last_modified_tmstmp() {
  max_last_modified_tmstmp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::_internal_max_last_modified_tmstmp() const {
  return max_last_modified_tmstmp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::max_last_modified_tmstmp() const {
  // @@protoc_insertion_point(field_get:tree.Node.max_last_modified_tmstmp)
  return _internal_max_last_modified_tmstmp();
}
inline void Node::_internal_set_max_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_last_modified_tmstmp_ = value;
}
inline void Node::set_max_last_modified_tmstmp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_last_modified_tmstmp(value);
  // @@protoc_insertion_point(field_set:tree.Node.max_last_modified_tmstmp)
}

// string md5 = 10;
inline void Node::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::md5() const {
  // @@protoc_insertion_point(field_get:tree.Node.md5)
  return _internal_md5();
}
inline void Node::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:tree.Node.md5)
}
inline std::string* Node::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:tree.Node.md5)
  return _internal_mutable_md5();
}
inline const std::string& Node::_internal_md5() const {
  return md5_.GetNoArena();
}
inline void Node::_internal_set_md5(const std::string& value) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_md5(std::string&& value) {
  
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tree.Node.md5)
}
inline void Node::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tree.Node.md5)
}
inline void Node::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tree.Node.md5)
}
inline std::string* Node::_internal_mutable_md5() {
  
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_md5() {
  // @@protoc_insertion_point(field_release:tree.Node.md5)
  
  return md5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:tree.Node.md5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tree

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2eproto
